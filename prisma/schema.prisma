// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// npx prisma generate
// npx prisma db push
// npx prisma studio

// To delete all DB
// npx prisma migrate reset

// For Stripe  webhook 
//stripe listen --forward-to localhost:3000/api/stripe-webhook


datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Profile {
  id           String   @id @default(uuid())
  clerkId      String   @unique
  firstName    String
  lastName     String
  username     String
  email        String
  profileImage String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  vehicles  Vehicle[]
  favorites Favorite[]
  reviews   Review[]
  Booking   Booking[]
}

model Vehicle {
  id          String  @id @default(uuid())
  type        Type    @default(car)
  price       Int
  mileage     Int     @default(0)
  make        String
  model       String
  year        Int
  doors       Int
  seats       Int
  gastype     Gastype @default(gasoline)
  color       String
  description String
  image       String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  profile   Profile  @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  profileId String

  favorites Favorite[]
  reviews   Review[]

  bookings Booking[]
}

model Favorite {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile   Profile @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  profileId String

  vehicle   Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  vehicleId String
}

model Review {
  id        String   @id @default(uuid())
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile   Profile? @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  profileId String?

  Vehicle   Vehicle? @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  vehicleId String?
}

model Booking {
  id String @id @default(uuid())

  orderTotal    Int
  totalNights   Int
  checkIn       DateTime
  checkOut      DateTime
  paymentStatus Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  profile   Profile @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  profileId String

  Vehicle   Vehicle? @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  vehicleId String?
}

enum Type {
  car
  convertible
  electric
  pickup
  sportscar
  suv
}

enum Gastype {
  gasoline
  diesel
  electric
  hybrid
}
